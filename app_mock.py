import streamlit as st
import tempfile
import os

# Use mock versions of our modules
from document_processor_mock import parse_document, chunk_text
from utils_mock import format_eligibility_criteria, format_verdict, get_app_info
from report_generator_mock import generate_report

# Mock implementations for development
def mock_summarize(text_chunks):
    return "This is a mock RFP summary. In the actual implementation, this would be generated by a language model based on the content of your RFP document."

def mock_extract_criteria(text_chunks):
    return [
        {"description": "Company must have at least 5 years of experience in the field", "importance": "Critical"},
        {"description": "Company must have completed at least 3 similar projects", "importance": "Important"},
        {"description": "Company should have a team of at least 10 qualified professionals", "importance": "Important"},
        {"description": "Company should have relevant certifications", "importance": "Nice-to-have"}
    ]

def mock_evaluate(criteria, company_chunks):
    return "This is a mock evaluation of the company against the RFP criteria. In the actual implementation, this would be a detailed analysis generated by a language model comparing your company's qualifications with the RFP requirements."

def mock_verdict(criteria, evaluation):
    return {
        "decision": "ELIGIBLE",
        "reasoning": "This is a mock verdict reasoning. In the actual implementation, this would be a detailed justification generated by a language model explaining why your company is eligible or not eligible to bid on this RFP."
    }

# Set page configuration
st.set_page_config(
    page_title="RFP Eligibility Analyzer",
    page_icon="üìù",
    layout="wide"
)

# Initialize session state variables if they don't exist
if 'rfp_text' not in st.session_state:
    st.session_state.rfp_text = None
if 'company_text' not in st.session_state:
    st.session_state.company_text = None
if 'summary' not in st.session_state:
    st.session_state.summary = None
if 'criteria' not in st.session_state:
    st.session_state.criteria = None
if 'evaluation' not in st.session_state:
    st.session_state.evaluation = None
if 'verdict' not in st.session_state:
    st.session_state.verdict = None
if 'report_html' not in st.session_state:
    st.session_state.report_html = None

# App title and introduction
st.title("RFP Eligibility Analyzer")
st.markdown("""
This tool helps you analyze Request for Proposals (RFPs) to determine if your company is eligible to bid.
Upload your RFP document and company profile to get started. All processing is done locally on your machine,
ensuring complete privacy of your sensitive documents.
""")

# Sidebar with information
with st.sidebar:
    st.header("Application Information")
    
    st.markdown("""
    ### RFP Analyzer
    
    This application helps you determine if your company is eligible to respond to a Request for Proposal (RFP).
    
    #### How it works:
    1. Upload your RFP document
    2. Upload your company profile
    3. Click "Analyze Documents"
    4. Review results in the Analysis tab
    5. Download a detailed report
    
    #### Supported file formats:
    - PDF (.pdf)
    - Word (.docx)
    - Text (.txt)
    """)
    
    # Display app info
    st.code(get_app_info(), language=None)

# Main content area with tabs
tab1, tab2, tab3 = st.tabs(["Document Upload", "Analysis", "Report"])

with tab1:
    st.header("Upload Documents")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Upload RFP Document")
        rfp_file = st.file_uploader("Choose an RFP document", type=['pdf', 'docx', 'txt'], key="rfp_upload")
        
        if rfp_file:
            with st.spinner("Processing RFP document..."):
                # In the mock version, we'll just use the filename
                st.session_state.rfp_text = f"Mock RFP text for {rfp_file.name}"
                st.success(f"‚úÖ RFP document processed")
                
                # Show sample of the text
                with st.expander("Preview RFP Text"):
                    st.text(st.session_state.rfp_text)
    
    with col2:
        st.subheader("Upload Company Profile")
        company_file = st.file_uploader("Choose a company profile document", type=['pdf', 'docx', 'txt'], key="company_upload")
        
        if company_file:
            with st.spinner("Processing company profile..."):
                # In the mock version, we'll just use the filename
                st.session_state.company_text = f"Mock company profile text for {company_file.name}"
                st.success(f"‚úÖ Company profile processed")
                
                # Show sample of the text
                with st.expander("Preview Company Profile Text"):
                    st.text(st.session_state.company_text)
    
    # Analyze button
    if st.button("Analyze Documents", disabled=not (st.session_state.rfp_text and st.session_state.company_text)):
        with st.spinner("Analyzing documents... This may take several minutes."):
            try:
                # Use simple string chunks for the mock functions
                rfp_chunks = [st.session_state.rfp_text]
                company_chunks = [st.session_state.company_text]
                
                # Analysis steps using mock functions
                # 1. Summarize RFP
                st.session_state.summary = mock_summarize(rfp_chunks)
                
                # 2. Extract eligibility criteria
                st.session_state.criteria = mock_extract_criteria(rfp_chunks)
                
                # 3. Evaluate company against criteria
                st.session_state.evaluation = mock_evaluate(
                    st.session_state.criteria, company_chunks
                )
                
                # 4. Determine final verdict
                st.session_state.verdict = mock_verdict(
                    st.session_state.criteria, st.session_state.evaluation
                )
                
                # 5. Generate report HTML
                st.session_state.report_html = generate_report(
                    st.session_state.summary,
                    st.session_state.criteria,
                    st.session_state.evaluation,
                    st.session_state.verdict
                )
                
                st.success("‚úÖ Analysis complete! Switch to the Analysis tab to view results.")
                
                # Auto-switch to Analysis tab
                st.info("Please click on the 'Analysis' tab to view the results.")
                
            except Exception as e:
                st.error(f"‚ùå Error during analysis: {str(e)}")

with tab2:
    st.header("RFP Analysis Results")
    
    if st.session_state.summary:
        st.subheader("RFP Summary")
        st.write(st.session_state.summary)
        
        st.subheader("Eligibility Criteria")
        criteria_formatted = format_eligibility_criteria(st.session_state.criteria)
        st.write(criteria_formatted, unsafe_allow_html=True)
        
        st.subheader("Company Evaluation")
        st.write(st.session_state.evaluation)
        
        st.subheader("Final Verdict")
        verdict_html = format_verdict(st.session_state.verdict)
        st.markdown(verdict_html, unsafe_allow_html=True)
    else:
        st.info("No analysis results yet. Please upload and analyze documents first.")

with tab3:
    st.header("Eligibility Report")
    
    if st.session_state.report_html:
        st.download_button(
            label="Download Report as HTML",
            data=st.session_state.report_html,
            file_name="rfp_eligibility_report.html",
            mime="text/html"
        )
        
        st.subheader("Report Preview")
        st.components.v1.html(st.session_state.report_html, height=600, scrolling=True)
    else:
        st.info("No report generated yet. Please complete the analysis first.")

# Footer
st.markdown("---")
st.markdown("""
**Privacy Notice**: All processing is done locally on your device. No data is sent to external servers.
""")